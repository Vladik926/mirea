№1.3
x = 5 >= 2
A = {1, 3, 7, 8}
B = {2, 4, 5, 10, 'apple'}
C = A & B

df = ['Антонова Антонина', 34, 'ж']
z = 'type'  # Строка z
D = [1, 'title', 2, 'content']

print("x:", x, "Тип:", type(x))
print("A:", A, "Тип:", type(A))
print("B:", B, "Тип:", type(B))
print("C:", C, "Тип:", type(C))
print("df:", df, "Тип:", type(df))
print("z:", z, "Тип:", type(z))
print("D:", D, "Тип:", type(D))
Ответ:
x: True Тип: <class 'bool'>
A: {8, 1, 3, 7} Тип: <class 'set'>
B: {2, 4, 5, 10, 'apple'} Тип: <class 'set'>
C: set() Тип: <class 'set'>
df: ['Антонова Антонина', 34, 'ж'] Тип: <class 'list'>
z: type Тип: <class 'str'>
D: [1, 'title', 2, 'content'] Тип: <class 'list'>

№2.3
x = float(input("Введите значение x: "))

if x < -5:
    print("x принадлежит интервалу (-∞, -5)")
elif -5 <= x <= 5:
    print("x принадлежит интервалу [-5, 5]")
else:
    print("x принадлежит интервалу (5, +∞)")
  ответ:
Введите значение x: 3
x принадлежит интервалу [-5, 5]


№3.31
x = 10
while x >= 1:
    print(x)
    x -= 3

ответ:
10
7
4
1
№3.32
characteristics = [
    "Возраст",
    "Пол",
    "Рост",
    "Вес",
    "Цвет волос",
    "Цвет глаз",
    "Уровень образования",
    "Профессия",
    "Место проживания",
    "Хобби",
    "Семейное положение",
    "Национальность",
    "Язык общения",
    "Здоровье",
    "Социальный статус"
]

# Вывод списка на экран
for characteristic in characteristics:
    print(characteristic)


ответ:
Возраст
Пол
Рост
Вес
Цвет волос
Цвет глаз
Уровень образования
Профессия
Место проживания
Хобби
Семейное положение
Национальность
Язык общения
Здоровье
Социальный статус




№3.33
x = 2
while x <= 15:
    print(x)
    x += 1


ответ:
2
3
4
5
6
7
8
9
10
11
12
13
14
15


№3.34
for i in range(106, 5, -25):
    print(i)

ответ:
106
81
56
31
6

№4.3.1
import random
import matplotlib.pyplot as plt
import statistics

# 1. Генерация массива случайных значений
n = 100  # Размер массива
random_values = [random.uniform(0, 1) for _ in range(n)]

# 2. Рассчет средних и медианных значений
mean_value = sum(random_values) / n
median_value = statistics.median(random_values)

# 3. Сравнение результатов и выводы
print(f'Сгенерированные случайные значения: {random_values}')
print(f'Среднее значение: {mean_value:.4f}')
print(f'Медианное значение: {median_value:.4f}')

if mean_value > median_value:
    print("Среднее значение больше медианного, что может указывать на наличие выбросов.")
elif mean_value < median_value:
    print("Среднее значение меньше медианного, что может указывать на наличие отрицательных выбросов.")
else:
    print("Среднее и медианное значения равны.")

# 4. Построение точечной диаграммы рассеяния
plt.figure(figsize=(10, 6))
plt.scatter(range(n), random_values, color='blue', alpha=0.6)  # Создаем точечную диаграмму
plt.axhline(y=mean_value, color='red', linestyle='--', label='Среднее значение')  # Линия для среднего
plt.axhline(y=median_value, color='green', linestyle='-', label='Медианное значение')  # Линия для медианы
plt.title('Точечная диаграмма рассеяния случайных значений')
plt.xlabel('Индекс')
plt.ylabel('Случайные значения')
plt.legend()
plt.grid()
plt.show()  # Отображаем график
ответ:
Сгенерированные случайные значения: [0.5466261966949534, 0.38931437325219753, 0.5731161592222996, 0.32127602488383644, 0.4697026363109622, 0.32761933921304964, 0.8429571463968386, 0.42429874374830967, 0.6395954390978459, 0.6573284779168728, 0.7314526918126817, 0.11984724345509656, 0.7364859449604179, 0.6246634347976311, 0.5487053074325628, 0.8748745715757247, 0.8235050060980084, 0.5306022409766059, 0.9848193907297849, 0.4300889490904697, 0.07877101694576949, 0.022157288771820216, 0.6785729632091059, 0.3032978275235102, 0.2826403053309239, 0.17073568635438963, 0.8332051539622789, 0.46186890431998895, 0.5479741379731392, 0.5521527648543257, 0.876046289486446, 0.4340529484139093, 0.37107024128882593, 0.13861033769407072, 0.38862789400692455, 0.05193253393039321, 0.5905930583837562, 0.5958226851200953, 0.7932791509233915, 0.3412425841392055, 0.4413675208820811, 0.23227321749343433, 0.6371153570452941, 0.41251286610767934, 0.6610557896542474, 0.5939199540879169, 0.9187194338518976, 0.8118429429506898, 0.4230193937558754, 0.9849223942842498, 0.6092117947094394, 0.6547990570887122, 0.32315602007197486, 0.09306750687471965, 0.7720926293967852, 0.6268473626136222, 0.9762976278666009, 0.10552656782279168, 0.713869132028739, 0.06920130115874301, 0.7350714298649944, 0.6449922585617971, 0.9981702095634499, 0.4935425931280897, 0.48436616614068395, 0.5475327541896274, 0.6725780394815137, 0.0627261176460866, 0.44977593838096463, 0.9352758404914734, 0.14364382185488778, 0.5015405209634559, 0.2773262701273256, 0.8811499564873871, 0.6968220152563126, 0.7992088051397699, 0.5423414101417972, 0.0311804904287607, 0.9934807557513236, 0.9000033280953571, 0.037521214630010125, 0.08948582354844403, 0.589310001997084, 0.9328029115473254, 0.6790830283219589, 0.20077557687076186, 0.835760028353913, 0.8131224099493954, 0.9894610929975872, 0.40417641153471673, 0.9966188776816906, 0.9454101972633855, 0.9525866388838734, 0.45616940605327205, 0.8411226025029307, 0.17604659399052636, 0.06875384721522093, 0.592230130056936, 0.06227722134970004, 0.6636519926504856]
Среднее значение: 0.5429
Медианное значение: 0.5626


№4.3.2
import math
import numpy as np
import matplotlib.pyplot as plt

# Функция для вычисления значений по заданной формуле
def calculate_function(x):
    return (math.sqrt(1 + math.e ** math.sqrt(x) + math.cos(x**2))) / abs(1 - (math.sin(x))**3)

# Генерируем значения функции для x от 1 до 10
x_values = np.arange(1, 11)  # Создаем массив значений x от 1 до 10
function_values = [calculate_function(x) for x in x_values]  # Вычисляем значения функции

# Отображаем график функции
plt.figure(figsize=(10, 6))  # Устанавливаем размер графика
plt.plot(x_values, function_values, label='f(x)', color='blue', marker='o')  # График функции
plt.title('График функции')  # Заголовок графика
plt.xlabel('x')  # Подпись оси X
plt.ylabel('f(x)')  # Подпись оси Y
plt.grid()  # Включаем сетку
plt.legend()  # Показываем легенду
plt.show()  # Отображаем график

# Отбираем первые 5 значений функции
new_function_values = function_values[:5]

# Отображаем точечную диаграмму для первых 5 значений
plt.figure(figsize=(10, 6))  # Устанавливаем размер графика
plt.scatter(np.arange(1, 6), new_function_values, color='red', label='Первые 5 значений')  # Точечная диаграмма
plt.title('Точечная диаграмма первых 5 значений функции')  # Заголовок графика
plt.xlabel('Индекс')  # Подпись оси X
plt.ylabel('f(x)')  # Подпись оси Y
plt.grid()  # Включаем сетку
plt.xticks(np.arange(1, 6))  # Устанавливаем метки по оси X
plt.legend()  # Показываем легенду
plt.show()  # Отображаем график

№4.3.3
import numpy as np
import matplotlib.pyplot as plt
from numpy import trapz

# Генерация значений x
x = np.linspace(0.0, 10, 100)  # Используем linspace для более равномерного распределения точек

# Вычисление значений функции y
y = np.abs(np.cos(x * np.exp(np.cos(x) + np.log(x + 1))))

# Построение графика
plt.figure(figsize=(10, 6))  # Устанавливаем размер графика
plt.plot(x, y, color='red', label='y = |cos(x * exp(cos(x) + log(x + 1)))|')  # График функции
plt.fill_between(x, y, color='lightcoral', alpha=0.5)  # Заполнение под графиком
plt.title('График функции с заполненной областью')  # Заголовок графика
plt.xlabel('x')  # Подпись оси X
plt.ylabel('y')  # Подпись оси Y
plt.grid(True)  # Включаем сетку
plt.legend()  # Показываем легенду
plt.show()  # Отображаем график

# Вычисление интеграла методом трапеций
integral_value = trapz(y, x)
print(f"Значение интеграла функции по заданному диапазону: {integral_value:.4f}")


№4.3.4
import yfinance as yf
import matplotlib.pyplot as plt

# Загрузка данных акций за 2021 год
apple_data = yf.download('AAPL', start='2021-01-01', end='2021-12-31')
microsoft_data = yf.download('MSFT', start='2021-01-01', end='2021-12-31')
google_data = yf.download('GOOGL', start='2021-01-01', end='2021-12-31')

# Построение графиков
plt.figure(figsize=(15, 10))

# График Apple
plt.subplot(3, 1, 1)  # 3 строки, 1 столбец, 1-й график
plt.plot(apple_data.index, apple_data['Close'], label='Apple', color='blue')
plt.title('Стоимость акций Apple (2021)')
plt.ylabel('Цена (USD)')
plt.grid()
plt.legend()

# График Microsoft
plt.subplot(3, 1, 2)  # 3 строки, 1 столбец, 2-й график
plt.plot(microsoft_data.index, microsoft_data['Close'], label='Microsoft', color='green')
plt.title('Стоимость акций Microsoft (2021)')
plt.ylabel('Цена (USD)')
plt.grid()
plt.legend()

# График Google
plt.subplot(3, 1, 3)  # 3 строки, 1 столбец, 3-й график
plt.plot(google_data.index, google_data['Close'], label='Google', color='red')
plt.title('Стоимость акций Google (2021)')
plt.ylabel('Цена (USD)')
plt.xlabel('Дата')
plt.grid()
plt.legend()

# Отображение графиков
plt.tight_layout()  # Убираем наложение графиков
plt.show()

№4.35:
import math


def calculator():
    print("Простой калькулятор")
    print("Введите два числа (x и y):")

    x = float(input("Введите x: "))
    y = float(input("Введите y: "))

    print("\nВыберите действие:")
    print("1. Сложение (x + y)")
    print("2. Вычитание (x - y)")
    print("3. Умножение (x * y)")
    print("4. Деление (x / y)")
    print("5. e^(x + y)")
    print("6. sin(x + y)")
    print("7. cos(x + y)")
    print("8. x^y")

    choice = input("\nВведите номер действия (1-8): ")

    if choice == '1':
        result = x + y
        print(f"Результат: {x} + {y} = {result}")
    elif choice == '2':
        result = x - y
        print(f"Результат: {x} - {y} = {result}")
    elif choice == '3':
        result = x * y
        print(f"Результат: {x} * {y} = {result}")
    elif choice == '4':
        if y != 0:
            result = x / y
            print(f"Результат: {x} / {y} = {result}")
        else:
            print("Ошибка: Деление на ноль!")
    elif choice == '5':
        result = math.exp(x + y)
        print(f"Результат: e^({x} + {y}) = {result}")
    elif choice == '6':
        result = math.sin(x + y)
        print(f"Результат: sin({x} + {y}) = {result}")
    elif choice == '7':
        result = math.cos(x + y)
        print(f"Результат: cos({x} + {y}) = {result}")
    elif choice == '8':
        result = x ** y
        print(f"Результат: {x} ^ {y} = {result}")
    else:
        print("Ошибка: Неверный номер действия!")


if __name__ == "__main__":
    calculator()


ответ:
Простой калькулятор
Введите два числа (x и y):
Введите x: 25
Введите y: 2

Выберите действие:
1. Сложение (x + y)
2. Вычитание (x - y)
3. Умножение (x * y)
4. Деление (x / y)
5. e^(x + y)
6. sin(x + y)
7. cos(x + y)
8. x^y

Введите номер действия (1-8): 8
Результат: 25.0 ^ 2.0 = 625.0

Process finished with exit code 0



